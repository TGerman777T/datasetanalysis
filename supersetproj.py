# -*- coding: utf-8 -*-
"""supersetproj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/193EGVv6BUTrsWktLoJJiqFVyQTowT0O8
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#from mpl_toolkits.mplot3d import Axes3D
import datetime as dt
import plotly.graph_objects as go
import plotly.express as px
import plotly.figure_factory as ff

#база данных
df = pd.read_csv("powerconsumption.csv")
df1 = pd.read_excel("pow1.xlsx")

df

fig = px.line(df,
              x="Datetime",
              y="Temperature",
              labels = {'Datetime':'Temperature'},
              title = "График температуры")
fig.show()


#база данных
df = pd.read_csv("powerconsumption.csv")
df1 = pd.read_excel("pow1.xlsx")

df

fig = px.line(df,
              x="Datetime",
              y="Temperature",
              labels = {'Datetime':'Temperature'},
              title = "График температуры")
fig.show()

fig = px.line(df,
              x="Datetime",
              y="Humidity",
              labels = {'Datetime':'Humidity'},
              title = "График влажности")
fig.show()

fig = px.line(df,
              x="Datetime",
              y="WindSpeed",
              labels = {'Datetime':'WindSpeed'},
              title = "График скорости ветра")
fig.show()

fig = px.line(df,
              x="Datetime",
              y="PowerConsumption_Zone1",
              labels = {'Datetime':'PowerConsumption_Zone1'},
              title = "График потребления энергии")
fig.show()

import xgboost as xgb
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)

# Define the features and target variable     "Отопление",
features = ["Temperature", "Humidity", "WindSpeed", "GeneralDiffuseFlows", "DiffuseFlows", "PowerConsumption_Zone1"]
target = "PowerConsumption_Zone1"

# Train an XGBoost model
xgb_model = xgb.XGBRegressor(
    objective='reg:squarederror',
    learning_rate=0.02,
    max_depth=6,
    subsample=0.9,
    colsample_bytree=1,
    n_estimators=6000,
    random_state=42
)

xgb_model.fit(train_df[features], train_df[target])
xgb_preds = xgb_model.predict(test_df[features])
print(xgb_preds)
print("\n")
print(test_df[target])


next_24_hours_X = df1[["Temperature", "Humidity", "WindSpeed", "GeneralDiffuseFlows", "DiffuseFlows", "PowerConsumption_Zone1"]]
# Make predictions using the model
next_24_hours_preds = xgb_model.predict(next_24_hours_X)

# Add the predicted values to the original dataframe
df1["PowerConsumption_Zone1"] = next_24_hours_preds.flatten()

# Write the updated data to the same excel file
df1.to_excel("PredictData.xlsx", index=False)

data = pd.read_excel("pow1.xlsx")
datapredict = pd.read_excel("PredictData.xlsx")
mapedf = np.mean(np.abs((data["PowerConsumption_Zone1"] - datapredict["PowerConsumption_Zone1"]) / data["PowerConsumption_Zone1"])) * 100
mape = np.mean(np.abs((test_df[target] - xgb_preds) / test_df[target])) * 100
mae = mean_absolute_error(test_df[target], xgb_preds)
mse = mean_squared_error(test_df[target], xgb_preds)
rmse = np.sqrt(mse)
r2 = r2_score(test_df[target], xgb_preds)

print("Метрики работы модели:")
print("__________________________________________________________________")
print("Model Percentage Mean Absolute Error: ", mape)
print("Mean Absolute Error: ", mae)
print("Mean Squared Error: ", mse)
print("Root Mean Squared Error: ", rmse)
print("R^2: ", r2)
print("Percentage Mean Absolute Error: ", mapedf)
print("__________________________________________________________________")
